(
    out_code: "@binding(3) @group(0) var tex_red_0 : texture_storage_2d<r32float, read_write>;\n\n@binding(4) @group(0) var tex_green_0 : texture_storage_2d<r32float, read_write>;\n\n@binding(5) @group(0) var tex_blue_0 : texture_storage_2d<r32float, read_write>;\n\n@binding(2) @group(0) var outputTexture_0 : texture_storage_2d<rgba8unorm, write>;\n\nstruct UniformInput_std140_0\n{\n    @align(16) mousePosition_0 : vec4<f32>,\n    @align(16) time_0 : f32,\n};\n\nstruct GlobalParams_std140_0\n{\n    @align(16) draw_x_0 : f32,\n    @align(4) draw_y_0 : f32,\n    @align(16) color_0 : vec3<f32>,\n    @align(16) uniformInput_0 : UniformInput_std140_0,\n};\n\n@binding(0) @group(0) var<uniform> globalParams_0 : GlobalParams_std140_0;\n@compute\n@workgroup_size(64, 1, 1)\nfn draw(@builtin(global_invocation_id) dispatchThreadId_0 : vec3<u32>)\n{\n    textureStore((tex_red_0), (vec2<u32>(u32(globalParams_0.draw_x_0), u32(globalParams_0.draw_y_0))), vec4<f32>((globalParams_0.color_0.x), 0, 0, 1));\n    textureStore((tex_green_0), (vec2<u32>(u32(globalParams_0.draw_x_0), u32(globalParams_0.draw_y_0))), vec4<f32>((globalParams_0.color_0.y), 0, 0, 1));\n    textureStore((tex_blue_0), (vec2<u32>(u32(globalParams_0.draw_x_0), u32(globalParams_0.draw_y_0))), vec4<f32>((globalParams_0.color_0.z), 0, 0, 1));\n    return;\n}\n\nfn imageMain_0( dispatchThreadID_0 : vec2<u32>,  screenSize_0 : vec2<i32>) -> vec4<f32>\n{\n    var imageW_0 : u32;\n    var imageH_0 : u32;\n    {var dim = textureDimensions((tex_red_0));((imageW_0)) = dim.x;((imageH_0)) = dim.y;};\n    var scaled_0 : vec2<u32> = vec2<u32>(floor(vec2<f32>(dispatchThreadID_0.xy) / vec2<f32>(f32(screenSize_0.y)) * vec2<f32>(f32(imageW_0), f32(imageH_0))));\n    var _S1 : vec2<i32> = vec2<i32>(vec2<u32>(scaled_0.x, imageH_0 - scaled_0.y));\n    var _S2 : f32 = (textureLoad((tex_red_0), (_S1)).x);\n    var _S3 : f32 = (textureLoad((tex_green_0), (_S1)).x);\n    var _S4 : f32 = (textureLoad((tex_blue_0), (_S1)).x);\n    return vec4<f32>(_S2, _S3, _S4, 1.0f);\n}\n\n@compute\n@workgroup_size(16, 16, 1)\nfn imageMain(@builtin(global_invocation_id) dispatchThreadID_1 : vec3<u32>)\n{\n    var width_0 : u32 = u32(0);\n    var height_0 : u32 = u32(0);\n    {var dim = textureDimensions((outputTexture_0));((width_0)) = dim.x;((height_0)) = dim.y;};\n    var _S5 : vec2<u32> = dispatchThreadID_1.xy;\n    var color_1 : vec4<f32> = imageMain_0(_S5, vec2<i32>(i32(width_0), i32(height_0)));\n    var _S6 : bool;\n    if((dispatchThreadID_1.x) >= width_0)\n    {\n        _S6 = true;\n    }\n    else\n    {\n        _S6 = (dispatchThreadID_1.y) >= height_0;\n    }\n    if(_S6)\n    {\n        return;\n    }\n    textureStore((outputTexture_0), (_S5), (color_1));\n    return;\n}\n\n",
    entry_group_sizes: {
        "draw": (64, 1, 1),
        "imageMain": (16, 16, 1),
    },
    bindings: {
        "tex_green": (
            binding: 4,
            visibility: "COMPUTE",
            ty: StorageTexture(
                access: r#read-write,
                format: "r32float",
                view_dimension: r#2d,
            ),
            count: None,
        ),
        "outputTexture": (
            binding: 2,
            visibility: "COMPUTE",
            ty: StorageTexture(
                access: r#write-only,
                format: "rgba8unorm",
                view_dimension: r#2d,
            ),
            count: None,
        ),
        "tex_blue": (
            binding: 5,
            visibility: "COMPUTE",
            ty: StorageTexture(
                access: r#read-write,
                format: "r32float",
                view_dimension: r#2d,
            ),
            count: None,
        ),
        "g_printedBuffer": (
            binding: 6,
            visibility: "COMPUTE",
            ty: Buffer(
                ty: Storage(
                    read_only: false,
                ),
                has_dynamic_offset: false,
                min_binding_size: None,
            ),
            count: None,
        ),
        "tex_red": (
            binding: 3,
            visibility: "COMPUTE",
            ty: StorageTexture(
                access: r#read-write,
                format: "r32float",
                view_dimension: r#2d,
            ),
            count: None,
        ),
        "outputBuffer": (
            binding: 1,
            visibility: "COMPUTE",
            ty: Buffer(
                ty: Storage(
                    read_only: false,
                ),
                has_dynamic_offset: false,
                min_binding_size: None,
            ),
            count: None,
        ),
        "uniformInput": (
            binding: 0,
            visibility: "COMPUTE",
            ty: Buffer(
                ty: Uniform,
                has_dynamic_offset: false,
                min_binding_size: None,
            ),
            count: None,
        ),
    },
    resource_commands: [
        (
            resource_name: "tex_red",
            command_data: BLACK(
                width: 200,
                height: 200,
                format: "r32float",
            ),
        ),
        (
            resource_name: "tex_green",
            command_data: BLACK(
                width: 200,
                height: 200,
                format: "r32float",
            ),
        ),
        (
            resource_name: "tex_blue",
            command_data: BLACK(
                width: 200,
                height: 200,
                format: "r32float",
            ),
        ),
        (
            resource_name: "draw_x",
            command_data: SLIDER(
                default: 100.0,
                min: 0.0,
                max: 200.0,
                element_size: 4,
                offset: 0,
            ),
        ),
        (
            resource_name: "draw_y",
            command_data: SLIDER(
                default: 100.0,
                min: 0.0,
                max: 200.0,
                element_size: 4,
                offset: 4,
            ),
        ),
        (
            resource_name: "color",
            command_data: COLORPICK(
                default: (1.0, 0.0, 1.0),
                element_size: 4,
                offset: 16,
            ),
        ),
    ],
    call_commands: [
        (
            function: "draw",
            parameters: FixedSize([
                1,
            ]),
        ),
    ],
    hashed_strings: {},
    uniform_size: 64,
    uniform_controllers: [
        SLIDER(
            name: "draw_x",
            value: 100.0,
            min: 0.0,
            max: 200.0,
            buffer_offset: 0,
        ),
        SLIDER(
            name: "draw_y",
            value: 100.0,
            min: 0.0,
            max: 200.0,
            buffer_offset: 4,
        ),
        COLORPICK(
            name: "color",
            value: (1.0, 0.0, 1.0),
            buffer_offset: 16,
        ),
    ],
)